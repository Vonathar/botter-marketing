{"version":3,"sources":["utils/input-validation.js","components/Option.jsx","components/common/Button.jsx","components/common/TextInput.jsx","components/Settings.jsx","utils/enums.js","utils/network.js","components/common/Loader.jsx","components/common/Card.jsx","components/common/Error.jsx","components/Result.jsx","App.jsx","index.js"],"names":["module","exports","validateProjectName","input","test","Option","getIcon","process","props","icon","getClassName","selectedOptionTitle","title","classNames","className","this","onClick","handleOptionClick","src","alt","description","Component","Button","isActive","setHandleClickActive","handleClick","text","defaultProps","TextInput","onChange","handleTextChange","type","required","label","Settings","renderSettings","getCampaignInfoSettings","setProjectName","stateKey","get","projectName","Fragment","QueryType","Object","freeze","CAMPAIGN_INFO","queryType","a","setIsWaitingAsync","isWaiting","message","setState","isWaitingAsync","loadingMessage","queryApi","axios","url","then","response","data","catch","err","state","queryResponse","shouldResultRender","Loader","Card","getButton","buttonText","Error","Result","buildResultItem","resultItems","objKey","push","key","window","open","App","optionTitle","event","target","value","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0HAwBAA,EAAOC,QAAU,CAACC,oBAdQ,SAACC,GAWzB,MADc,8BACDC,KAAKD,M,gLCJCE,E,4MAkBnBC,QAAU,WACR,MAAOC,oBAAA,kBAAoC,EAAKC,MAAMC,KAA/C,S,EAQTC,aAAe,WAEb,OAAO,EAAKF,MAAMG,sBAAwB,EAAKH,MAAMI,MACjDC,sDAFa,wB,uDAMT,IAAD,OACP,OACE,yBACEC,UAAWC,KAAKL,eAChBM,QAAS,WACP,EAAKR,MAAMS,kBAAkB,EAAKT,MAAMI,SAG1C,yBACEE,UAAW,6BACXI,IAAKH,KAAKT,UACVa,IAAKJ,KAAKP,MAAMC,OAElB,wBAAIK,UAAW,+BAAgCC,KAAKP,MAAMI,OAC1D,uBAAGE,UAAW,qCACXC,KAAKP,MAAMY,kB,GAjDcC,aCHfC,E,4MAmBnBZ,aAAe,WAEb,OAAO,EAAKF,MAAMe,SADF,SACyBT,2B,EAO3CU,qBAAuB,WACrB,OAAO,EAAKhB,MAAMe,SAAW,EAAKf,MAAMiB,YAAc,M,uDAItD,OACE,yBACEX,UAAWC,KAAKL,eAChBM,QAASD,KAAKS,wBAEbT,KAAKP,MAAMkB,U,GAtCgBL,aAAfC,EAUZK,aAAe,CACpBJ,UAAU,G,ICXOK,E,uKASjB,OACE,yBAAKd,UAAU,cACb,2BAAOe,SAAUd,KAAKP,MAAMsB,iBAAkBC,KAAK,OAAOC,UAAQ,IAClE,0BAAMlB,UAAU,QAChB,+BAAQC,KAAKP,MAAMyB,Y,GAbYZ,aCLlBa,E,4MAenBC,eAAiB,WACf,OAAQ,EAAK3B,MAAMG,qBACjB,IAAK,gBACH,OAAO,EAAKyB,0BAEd,QACE,S,EAQNA,wBAA0B,WACxB,OACE,yBAAKtB,UAAU,iBACb,kBAAC,EAAD,CACEmB,MAAO,eACPH,iBAAkB,EAAKtB,MAAM6B,eAC7BC,SAAU,gBAEZ,kBAAC,EAAD,CACEZ,KAAM,QACND,YAAa,WACX,EAAKjB,MAAM+B,IAAI,iBAEjBhB,SAAqC,OAA3B,EAAKf,MAAMgC,gB,uDAO3B,OAAO,kBAAC,IAAMC,SAAP,KAAiB1B,KAAKoB,sB,GAjDKd,a,wCCHzBqB,EAAYC,OAAOC,OAAO,CACrCC,cAAe,iBCOV,SAAeN,EAAtB,kC,4CAAO,WAAmBO,GAAnB,0BAAAC,EAAA,sDAUCC,EAAoB,SAACC,GAA6B,IAAlBC,EAAiB,uDAAP,GAC1CD,EACF,EAAKE,SAAS,CACZC,gBAAgB,EAChBC,eAAgBH,EAChBJ,UAAWA,IAGb,EAAKK,SAAS,CAACC,gBAAgB,KAW7BE,EA7BD,+BAAAP,EAAA,MA6BY,sBAAAA,EAAA,6DACfC,GAAkB,EAAM,mBADT,kBAERO,IAAMhB,IAAIiB,GAAKC,MAAK,SAACC,GAE1B,OADAV,GAAkB,GACXU,EAASC,QACfC,OAAM,SAACC,GAER,OADAb,GAAkB,GACXa,EAAIH,SAASC,KAAKT,YAPZ,2CA7BZ,qDA6CDM,EAA0E,0CA7CzE,KA8CGV,EA9CH,cA+CEJ,EAAUG,cA/CZ,wBAgDDW,GAAG,2BAAwBzC,KAAK+C,MAAMtB,aAhDrC,uCAsDLzB,KAtDK,UAuDkBuC,IAvDlB,0BAuDHS,cAvDG,KAwDHC,oBAAoB,GAxDjB,KAsDAb,SAtDA,kE,kCCAcc,E,uKASjB,OAAIlD,KAAKP,MAAMe,SAEX,yBAAKT,UAAW,UACd,yBAAKA,UAAW,sBAChB,yBAAKA,UAAW,mBAAoBC,KAAKP,MAAM0C,UAI5C,S,GAjBuB7B,aCef6C,E,4MAcnBC,UAAY,WACV,GAAI,EAAK3D,MAAMiB,YACb,OACE,kBAAC,EAAD,CACEA,YAAa,EAAKjB,MAAMiB,YACxBC,KAAM,EAAKlB,MAAM4D,c,uDAOvB,OACE,yBAAKtD,UAAW,QACd,wBAAIA,UAAW,eAAgBC,KAAKP,MAAMI,OACzCG,KAAKoD,iB,GA7BoB9C,aAAb6C,EAUZvC,aAAe,CACpByC,WAAY,M,IC3BKC,E,uKAOjB,OACE,yBAAKvD,UAAW,SACd,yBACEA,UAAW,cACXI,IAAKX,6CAEP,uBAAGO,UAAW,kBAAmBC,KAAKP,MAAM0C,c,GAbjB7B,aCGdiD,E,4MAYnBC,gBAAkB,WAChB,IAAMR,EAAgB,EAAKvD,MAAMuD,cAC7BS,EAAc,GAElB,GAA6B,kBAAlBT,GAAgD,OAAlBA,EAAwB,CAAC,IAAD,WACtDU,GACPD,EAAYE,KACV,kBAAC,EAAD,CACE9D,MAAO6D,EACPE,IAAKF,EACLhD,YAAa,WACXmD,OAAOC,KAAKd,EAAcU,GAAS,eAN3C,IAAK,IAAIA,KAAUV,EAAgB,EAA1BU,GAWT,OAAOD,EAEP,OAAO,kBAAC,EAAD,CAAOtB,QAASa,K,uDAKzB,OAAIhD,KAAKP,MAAMe,SACN,kBAAC,IAAMkB,SAAP,KAAiB1B,KAAKwD,mBAEtB,S,GAtCuBlD,aC6FrByD,E,kDAnFb,WAAYtE,GAAQ,IAAD,8BACjB,cAAMA,IAdRsD,MAAQ,CACNnD,oBAAqB,GACrB6B,YAAa,KACbM,UAAW,GACXiB,cAAe,GACfX,gBAAgB,EAChBY,oBAAoB,EACpBX,eAAgB,IAMC,EASnBpC,kBAAoB,SAAC8D,GACf,EAAKjB,MAAMnD,sBAAwBoE,GACrC,EAAK5B,SAAS,CACZxC,oBAAqBoE,EACrBf,oBAAoB,KAbP,EAsBnB3B,eAAiB,SAAC2C,GAChB,IAAM7E,EAAQ6E,EAAMC,OAAOC,MACvBhF,8BAAoBC,GACtB,EAAKgD,SAAS,CAAEX,YAAarC,IAE7B,EAAKgD,SAAS,CAAEX,YAAa,QAzB/B,EAAKD,IAAMA,EAAI4C,KAAJ,gBAFM,E,qDAgCjB,OACE,yBAAKrE,UAAW,OACd,yBAAKA,UAAW,gBACd,kBAAC,EAAD,CACEL,KAAM,QACNG,MAAO,gBACPQ,YAAa,qCACbH,kBAAmBF,KAAKE,kBACxBN,oBAAqBI,KAAK+C,MAAMnD,sBAElC,kBAAC,EAAD,CACEF,KAAM,OACNG,MAAO,gBACPQ,YAAa,qCACbH,kBAAmBF,KAAKE,kBACxBN,oBAAqBI,KAAK+C,MAAMnD,sBAElC,kBAAC,EAAD,CACEF,KAAM,cACNG,MAAO,gBACPQ,YACE,4FAEFH,kBAAmBF,KAAKE,kBACxBN,oBAAqBI,KAAK+C,MAAMnD,uBAGpC,kBAAC,EAAD,CACEA,oBAAqBI,KAAK+C,MAAMnD,oBAChC0B,eAAgBtB,KAAKsB,eACrBG,YAAazB,KAAK+C,MAAMtB,YACxBD,IAAKxB,KAAKwB,MAEZ,yBAAKzB,UAAW,iBACd,kBAAC,EAAD,CACES,SAAUR,KAAK+C,MAAMV,eACrBF,QAASnC,KAAK+C,MAAMT,iBAEtB,kBAAC,EAAD,CACE9B,UACGR,KAAK+C,MAAMV,gBAAkBrC,KAAK+C,MAAME,mBAE3CD,cAAehD,KAAK+C,MAAMC,iBAG9B,uBAAGjD,UAAW,eAAd,6C,GA3FUO,aCPlB+D,IAASC,OAAO,kBAAC,IAAMC,WAAP,SAAmB,kBAAC,EAAD,MAAnB,KAA+CC,SAASC,eAAe,W","file":"static/js/main.1dc4c2b4.chunk.js","sourcesContent":["/**\n * @summary Provides input validation for text fields.\n * @author  Gianmarco Caputo <gianmarco.caputo.uk@gmail.com>\n */\n\n/**\n * @summary Validates the projectName.\n * @desc Tests the given input against a regular expression to ensure it's valid.\n * @return {boolean} whether the input is valid.\n */\nlet validateProjectName = (input) => {\n  /**\n   * This regular expression matches a string using the following criteria:\n   *\n   * 1. it must start with 'pm'\n   * 2. it may have a partner identifier, such as 'sa' or 'le'\n   * 3. it must have a 3-digit major version\n   * 4. it must have a hyphen\n   * 5. it must have a 3-digit minor version\n   * */\n  const regex = /pm([a-z]{2})?\\d{3}-\\d{3}/gmi;\n  return regex.test(input);\n};\n\nmodule.exports = {validateProjectName};","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a single clickable menu option.\n * @component\n * @example\n * ```jsx\n * <Option\n *    icon=\"lens\"\n *    title=\"foo\"\n *    description=\"bar\"\n *    handleClick={myFunc}\n *    selectedOptionTitle=\"Campaign Info\"\n * />\n * ```\n */\nexport default class Option extends Component {\n  static propTypes = {\n    /** The filename of the icon to use from the /public directory. */\n    icon: PropTypes.string.isRequired,\n    /** A short title for the option. */\n    title: PropTypes.string.isRequired,\n    /** A brief description of the purpose of the option. */\n    description: PropTypes.string.isRequired,\n    /** The event handler for click events on the entire component. */\n    handleOptionClick: PropTypes.func.isRequired,\n    /** The title of the option that is currently selected. */\n    selectedOptionTitle: PropTypes.string,\n  };\n\n  /**\n   * Fetches the icon from the /public directory based on the value of prop.icon\n   * @return {String} the path to use as the icon's src\n   */\n  getIcon = () => {\n    return process.env.PUBLIC_URL + `/images/${this.props.icon}.svg`;\n  };\n\n  /**\n   * Dynamically builds the className for menu options, always returning the base class and\n   * optionally adding the selected state modifier.\n   * @return A String that can be directly assigned to className\n   */\n  getClassName = () => {\n    let classNames = \"app__options__option\";\n    return this.props.selectedOptionTitle === this.props.title\n      ? classNames + \" app__options__option--selected\"\n      : classNames;\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        onClick={() => {\n          this.props.handleOptionClick(this.props.title);\n        }}\n      >\n        <img\n          className={\"app__options__option__icon\"}\n          src={this.getIcon()}\n          alt={this.props.icon}\n        />\n        <h1 className={\"app__options__option__title\"}>{this.props.title}</h1>\n        <p className={\"app__options__option__description\"}>\n          {this.props.description}\n        </p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a button with a custom click handler.\n * @component\n * @example\n * ```jsx\n * <Button\n *    handleClick={myFunc}\n *    text=\"foo\"\n * />\n * ```\n */\nexport default class Button extends Component {\n  static propTypes = {\n    /** The event handler for click events on the button. */\n    handleClick: PropTypes.func.isRequired,\n    /** The visible text on the button. */\n    text: PropTypes.string.isRequired,\n    /** Whether the button should be clickable. */\n    isActive: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    isActive: true,\n  };\n\n  /**\n   * Dynamically builds the className for the button, always returning the base\n   * class and optionally adding the 'disabled' state modifier.\n   * @return {String} the className for the Button.\n   */\n  getClassName = () => {\n    let className = \"button\";\n    return this.props.isActive ? className : className + \" button--disabled\";\n  };\n\n  /**\n   * Dynamically enables the onclick handler based on the value of props.isActive.\n   * @return {function | null} the onclick handler for the Button.\n   */\n  setHandleClickActive = () => {\n    return this.props.isActive ? this.props.handleClick : null;\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        onClick={this.setHandleClickActive()}\n      >\n        {this.props.text}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a text input with a label in material style.\n * @component\n * @example\n * ```jsx\n * <TextInput\n *    handleTextChange={myFunc}\n *    label=\"bar\"\n * />\n * ```\n */\nexport default class TextInput extends Component {\n  static propTypes = {\n    /** The event handler for onchange events. */\n    handleTextChange: PropTypes.func.isRequired,\n    /** The label of the input. */\n    label: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return (\n      <div className=\"text-input\">\n        <input onChange={this.props.handleTextChange} type=\"text\" required />\n        <span className=\"bar\" />\n        <label>{this.props.label}</label>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Button from \"./common/Button\";\nimport TextInput from \"./common/TextInput\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders the available settings for the currently selected option.\n * @component\n */\nexport default class Settings extends Component {\n  static propTypes = {\n    /** The title of the currently selected option. */\n    selectedOptionTitle: PropTypes.string.isRequired,\n    /** A function to update the projectName using the value of an Event object. */\n    setProjectName: PropTypes.func.isRequired,\n    /** A function to fetch resources from the BotterMarketing API. */\n    get: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Returns the appropriate settings menu for each available option.\n   * @return JSX that represents the settings in the DOM, or undefined if\n   *         there are no settings available for the given selectedOptionTitle.\n   */\n  renderSettings = () => {\n    switch (this.props.selectedOptionTitle) {\n      case \"Campaign info\": {\n        return this.getCampaignInfoSettings();\n      }\n      default:\n        return;\n    }\n  };\n\n  /**\n   * Renders the settings menu for the \"Campaign info\" option.\n   * @return JSX that represents the available settings for \"Campaign info\".\n   */\n  getCampaignInfoSettings = () => {\n    return (\n      <div className=\"app__settings\">\n        <TextInput\n          label={\"Project name\"}\n          handleTextChange={this.props.setProjectName}\n          stateKey={\"projectName\"}\n        />\n        <Button\n          text={\"START\"}\n          handleClick={() => {\n            this.props.get(\"campaignInfo\");\n          }}\n          isActive={this.props.projectName !== null}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    return <React.Fragment>{this.renderSettings()}</React.Fragment>;\n  }\n}\n","/**\n * @summary Exports Enum-like objects for constant values.\n * @author  Gianmarco Caputo <gianmarco.caputo.uk@gmail.com>\n */\n\n/** The legal query types for the BotterMarketing API. */\nexport const QueryType = Object.freeze({\n  CAMPAIGN_INFO: \"campaignInfo\",\n});","/**\n * @summary Provides utility functions to query the BotterMarketing API.\n * @author  Gianmarco Caputo <gianmarco.caputo.uk@gmail.com>\n */\nimport axios from \"axios\";\nimport {QueryType} from \"./enums\";\n\n/**\n * @summary Calls the API with a dynamic endpoint based on the given query.\n * @desc Asynchronously calls the BotterMarketing API. For the duration of the asynchronous call\n *       sets isWaitingAsync=true in the state of the App component, triggering the rendering of the Loader component.\n *       Once the call to the API terminates, updates the state of the App component to store the response.\n * @param queryType {QueryType} an enum of type QueryType, representing one of the available queries\n */\nexport async function get(queryType) {\n\n  /**\n   * @summary Signals that execution is waiting for an async call.\n   * @desc Dynamically sends a signal to the App component while waiting for the end of an asynchronous action.\n   *       In the context of this program, 'sending a signal' means updating isWaitingAsync in the state\n   *       of the App component, which triggers the rendering of the Loader component with the given message.\n   * @param isWaiting {boolean} indicated whether the execution should be paused, or resumed.\n   * @param message {String} the message that should be shown in the Loader component.\n   */\n  const setIsWaitingAsync = (isWaiting, message = \"\") => {\n    if (isWaiting) {\n      this.setState({\n        isWaitingAsync: true,\n        loadingMessage: message,\n        queryType: queryType,\n      });\n    } else {\n      this.setState({isWaitingAsync: false});\n    }\n  };\n\n  /**\n   * @summary Queries the BotterMarketing API.\n   * @desc Calls the API of BotterMarketing using the dynamic URL defined in the local scope, then\n   *       returns the response data. Renders the Loader component for the duration of the call.\n   * @return {Object} the data received in the response from the API.\n   * @return {String} the error message in case of a failed request.\n   */\n  const queryApi = async () => {\n    setIsWaitingAsync(true, \"Querying API...\");\n    return axios.get(url).then((response) => {\n      setIsWaitingAsync(false);\n      return response.data;\n    }).catch((err) => {\n      setIsWaitingAsync(false);\n      return err.response.data.message;\n    });\n  };\n\n  /**\n   * Builds the URL for requests, dynamically switching between dev/prod\n   * Local -> http://127.0.0.1:5000/\n   * Prod  -> https://botter-marketing.herokuapp.com/\n   * */\n  let url = process.env.NODE_ENV === \"development\" ? \"http://127.0.0.1:5000/\" : \"https://botter-marketing.herokuapp.com/\";\n  switch (queryType) {\n    case QueryType.CAMPAIGN_INFO: {\n      url += `info?projectName=${this.state.projectName}`;\n      break;\n    }\n  }\n\n  // Updates the state\n  this.setState({\n    queryResponse: await queryApi(),\n    shouldResultRender: true\n  });\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a basic loader with an infinite animation.\n * @component\n * @example\n * ```jsx\n * <Loader\n *    isActive={myBool}\n *    message=\"Loading foo..\"\n * />\n * ```\n */\nexport default class Loader extends Component {\n  static propTypes = {\n    /** Indicates whether the loader should render. */\n    isActive: PropTypes.bool.isRequired,\n    /** The message below the loader. */\n    message: PropTypes.string.isRequired,\n  };\n\n  render() {\n    if (this.props.isActive) {\n      return (\n        <div className={\"loader\"}>\n          <div className={\"loader__animation\"} />\n          <div className={\"loader__message\"}>{this.props.message}</div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a card with an optional button.\n * @component\n * @example\n * ```jsx\n * <Card\n *    title=\"foo\"\n *    handleClick={myFunc}\n *    buttonText=\"bar\"\n * />\n * ```\n * @example\n * ```jsx\n * // Displays the default text: \"GO\"\n * <Card\n *    title=\"foo\"\n *    handleClick={myFunc}\n * />\n * ```\n * @example\n * ```jsx\n * // Does not render any button\n * <Card title=\"foo\" />\n * ```\n */\nexport default class Card extends Component {\n  static propTypes = {\n    /** The title at the top of the card. */\n    title: PropTypes.string.isRequired,\n    /** The event handler for click events on the button. */\n    handleClick: PropTypes.func,\n    /** The visible text on the button. The default text says \"GO\" */\n    buttonText: PropTypes.string,\n  };\n\n  static defaultProps = {\n    buttonText: \"GO\",\n  };\n\n  getButton = () => {\n    if (this.props.handleClick) {\n      return (\n        <Button\n          handleClick={this.props.handleClick}\n          text={this.props.buttonText}\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className={\"card\"}>\n        <h1 className={\"card__title\"}>{this.props.title}</h1>\n        {this.getButton()}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders an error card.\n * @component\n * @example\n * ```jsx\n * <Error\n *    message=\"foo\"\n * />\n * ```\n */\nexport default class Error extends Component {\n  static propTypes = {\n    /** The error message. */\n    message: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return (\n      <div className={\"error\"}>\n        <img\n          className={\"error__icon\"}\n          src={process.env.PUBLIC_URL + `/images/information.svg`}\n        />\n        <p className={\"error__message\"}>{this.props.message}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Card from \"./common/Card\";\nimport PropTypes from \"prop-types\";\nimport Error from \"./common/Error\";\n\n/**\n * Graphically renders the Result of the API calls.\n * @component\n * @example\n * ```jsx\n * <Result\n *    isActive={myBool}\n *    queryResponse={foo: \"bar\", ..}\n * />\n * ```\n */\nexport default class Result extends Component {\n  static propTypes = {\n    /** Indicates whether the component should render. */\n    isActive: PropTypes.bool.isRequired,\n    /** The title of the option that is currently selected. */\n    queryResponse: PropTypes.object,\n  };\n\n  /**\n   * Builds and returns an array of Card components to visualise each entry in queryResponse.\n   * @return {Array || JSX.Element} an array of Card components, or a JSX element if the array is empty.\n   */\n  buildResultItem = () => {\n    const queryResponse = this.props.queryResponse;\n    let resultItems = [];\n\n    if (typeof queryResponse === 'object' && queryResponse !== null) {\n      for (let objKey in queryResponse) {\n        resultItems.push(\n          <Card\n            title={objKey}\n            key={objKey}\n            handleClick={() => {\n              window.open(queryResponse[objKey], \"_blank\");\n            }}\n          />\n        );\n      }\n      return resultItems;\n    } else {\n      return <Error message={queryResponse} />\n    }\n  };\n\n  render() {\n    if (this.props.isActive) {\n      return <React.Fragment>{this.buildResultItem()}</React.Fragment>;\n    } else {\n      return null;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport Option from \"./components/Option\";\nimport Settings from \"./components/Settings\";\nimport { get } from \"./utils/network\";\nimport { validateProjectName } from \"./utils/input-validation\";\nimport Loader from \"./components/common/Loader\";\nimport Result from \"./components/Result\";\n\n/**\n * Renders a top-level container for all components.\n * @component\n */\nclass App extends Component {\n  state = {\n    selectedOptionTitle: \"\",\n    projectName: null,\n    queryType: \"\",\n    queryResponse: {},\n    isWaitingAsync: false,\n    shouldResultRender: false,\n    loadingMessage: \"\",\n  };\n\n  /**\n   * Binds `this` to the get function from network.js.\n   */\n  constructor(props) {\n    super(props);\n    this.get = get.bind(this);\n  }\n\n  /**\n   * Updates the state to store the selected option.\n   * @param optionTitle {String} - A String that represents the title of the option\n   */\n  handleOptionClick = (optionTitle) => {\n    if (this.state.selectedOptionTitle !== optionTitle) {\n      this.setState({\n        selectedOptionTitle: optionTitle,\n        shouldResultRender: false,\n      });\n    }\n  };\n\n  /**\n   * Updates the state to store the project name after validating the given input.\n   * @param event {Event} - The event fired by a text input that holds the string value\n   */\n  setProjectName = (event) => {\n    const input = event.target.value;\n    if (validateProjectName(input)) {\n      this.setState({ projectName: input });\n    } else {\n      this.setState({ projectName: null });\n    }\n  };\n\n  render() {\n    return (\n      <div className={\"app\"}>\n        <div className={\"app__options\"}>\n          <Option\n            icon={\"build\"}\n            title={\"Test campaign\"}\n            description={\"This feature is not yet available!\"}\n            handleOptionClick={this.handleOptionClick}\n            selectedOptionTitle={this.state.selectedOptionTitle}\n          />\n          <Option\n            icon={\"edit\"}\n            title={\"Edit campaign\"}\n            description={\"This feature is not yet available!\"}\n            handleOptionClick={this.handleOptionClick}\n            selectedOptionTitle={this.state.selectedOptionTitle}\n          />\n          <Option\n            icon={\"information\"}\n            title={\"Campaign info\"}\n            description={\n              \"Get all campaign URLs, such as asset upload page, template testing, Zeplin, and InVision.\"\n            }\n            handleOptionClick={this.handleOptionClick}\n            selectedOptionTitle={this.state.selectedOptionTitle}\n          />\n        </div>\n        <Settings\n          selectedOptionTitle={this.state.selectedOptionTitle}\n          setProjectName={this.setProjectName}\n          projectName={this.state.projectName}\n          get={this.get}\n        />\n        <div className={\"app__progress\"}>\n          <Loader\n            isActive={this.state.isWaitingAsync}\n            message={this.state.loadingMessage}\n          />\n          <Result\n            isActive={\n              !this.state.isWaitingAsync && this.state.shouldResultRender\n            }\n            queryResponse={this.state.queryResponse}\n          />\n        </div>\n        <p className={\"app__footer\"}>Copyright © 2020 Gianmarco Caputo</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(<React.StrictMode> <App/> </React.StrictMode>, document.getElementById(\"root\"));"],"sourceRoot":""}